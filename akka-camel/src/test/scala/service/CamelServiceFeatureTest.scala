package se.scalablesolutions.akka.camel.service

import org.apache.camel.builder.RouteBuilder
import org.scalatest.{GivenWhenThen, BeforeAndAfterAll, FeatureSpec}

import se.scalablesolutions.akka.actor.{Actor, ActorRegistry}
import se.scalablesolutions.akka.camel.{CamelContextManager, Message, Consumer}

class CamelServiceFeatureTest extends FeatureSpec with BeforeAndAfterAll with GivenWhenThen {
  var service: CamelService = CamelService.newInstance

  override protected def beforeAll() = {
    ActorRegistry.shutdownAll
    // register test consumer before starting the CamelService
    new TestConsumer("direct:publish-test-1").start
    // Consigure a custom camel route
    CamelContextManager.init
    CamelContextManager.context.addRoutes(new TestRoute)
    // set expectations for testing purposes
    service.consumerPublisher.expectPublishCount(1)
    // start the CamelService
    service.load
    // await publication of first test consumer 
    service.consumerPublisher.awaitPublish
  }

  override protected def afterAll() = {
    service.unload
    ActorRegistry.shutdownAll
  }

  feature("Publish registered consumer actors in the global CamelContext") {

    scenario("access registered consumer actors via Camel direct-endpoints") {

      given("two consumer actors registered before and after CamelService startup")
      service.consumerPublisher.expectPublishCount(1)
      new TestConsumer("direct:publish-test-2").start

      when("requests are sent to these actors")
      service.consumerPublisher.awaitPublish
      val response1 = CamelContextManager.template.requestBody("direct:publish-test-1", "msg1")
      val response2 = CamelContextManager.template.requestBody("direct:publish-test-2", "msg2")

      then("both actors should have replied with expected responses")
      assert(response1 === "received msg1")
      assert(response2 === "received msg2")
    }
  }

  feature("Configure a custom Camel route for the global CamelContext") {

    scenario("access an actor from the custom Camel route") {

      given("a registered actor and a custom route to that actor")
      val actor = new TestActor().start

      when("sending a a message to that route")
      val response = CamelContextManager.template.requestBody("direct:custom-route-test-1", "msg3")

      then("an expected response generated by the actor should be returned")
      assert(response === "received msg3")
    }
  }

  class TestConsumer(uri: String) extends Actor with Consumer {
    def endpointUri = uri
    protected def receive = {
      case msg: Message => reply("received %s" format msg.body)
    }
  }

  class TestActor extends Actor {
    id = "custom-actor-id"
    protected def receive = {
      case msg: Message => reply("received %s" format msg.body)
    }
  }

  class TestRoute extends RouteBuilder {
    def configure {
      from("direct:custom-route-test-1") .to("actor:custom-actor-id")
    }
  }
}